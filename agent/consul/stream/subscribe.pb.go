// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscribe.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic int32

const (
	Topic_ServiceHealth Topic = 0
)

var Topic_name = map[int32]string{
	0: "ServiceHealth",
}

var Topic_value = map[string]int32{
	"ServiceHealth": 0,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}

func (Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

type Operation int32

const (
	Operation_Upsert Operation = 0
	Operation_Delete Operation = 1
)

var Operation_name = map[int32]string{
	0: "Upsert",
	1: "Delete",
}

var Operation_value = map[string]int32{
	"Upsert": 0,
	"Delete": 1,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

type ACLResource int32

const (
	ACLResource_ServiceACL ACLResource = 0
	ACLResource_NodeACL    ACLResource = 1
)

var ACLResource_name = map[int32]string{
	0: "ServiceACL",
	1: "NodeACL",
}

var ACLResource_value = map[string]int32{
	"ServiceACL": 0,
	"NodeACL":    1,
}

func (x ACLResource) String() string {
	return proto.EnumName(ACLResource_name, int32(x))
}

func (ACLResource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

type SubscribeRequest struct {
	Topic                Topic    `protobuf:"varint,1,opt,name=Topic,proto3,enum=stream.Topic" json:"Topic,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Index                uint64   `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	Filter               string   `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	TopicFilters         *Filters `protobuf:"bytes,6,opt,name=TopicFilters,proto3" json:"TopicFilters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_ServiceHealth
}

func (m *SubscribeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SubscribeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SubscribeRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SubscribeRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *SubscribeRequest) GetTopicFilters() *Filters {
	if m != nil {
		return m.TopicFilters
	}
	return nil
}

type Event struct {
	Topic        Topic      `protobuf:"varint,1,opt,name=Topic,proto3,enum=stream.Topic" json:"Topic,omitempty"`
	Key          string     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Index        uint64     `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	RequiredACLs []*ACLRule `protobuf:"bytes,4,rep,name=RequiredACLs,proto3" json:"RequiredACLs,omitempty"`
	Op           Operation  `protobuf:"varint,5,opt,name=Op,proto3,enum=stream.Operation" json:"Op,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Event_ServiceHealth
	//	*Event_EndOfSnapshot
	Payload              isEvent_Payload `protobuf_oneof:"Payload"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Payload interface {
	isEvent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ServiceHealth struct {
	ServiceHealth *ServiceHealthUpdate `protobuf:"bytes,6,opt,name=ServiceHealth,proto3,oneof"`
}
type Event_EndOfSnapshot struct {
	EndOfSnapshot bool `protobuf:"varint,7,opt,name=EndOfSnapshot,proto3,oneof"`
}

func (*Event_ServiceHealth) isEvent_Payload() {}
func (*Event_EndOfSnapshot) isEvent_Payload() {}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_ServiceHealth
}

func (m *Event) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetRequiredACLs() []*ACLRule {
	if m != nil {
		return m.RequiredACLs
	}
	return nil
}

func (m *Event) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_Upsert
}

func (m *Event) GetServiceHealth() *ServiceHealthUpdate {
	if x, ok := m.GetPayload().(*Event_ServiceHealth); ok {
		return x.ServiceHealth
	}
	return nil
}

func (m *Event) GetEndOfSnapshot() bool {
	if x, ok := m.GetPayload().(*Event_EndOfSnapshot); ok {
		return x.EndOfSnapshot
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ServiceHealth)(nil),
		(*Event_EndOfSnapshot)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceHealth); err != nil {
			return err
		}
	case *Event_EndOfSnapshot:
		t := uint64(0)
		if x.EndOfSnapshot {
			t = 1
		}
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Event.Payload has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 6: // Payload.ServiceHealth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceHealthUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ServiceHealth{msg}
		return true, err
	case 7: // Payload.EndOfSnapshot
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_EndOfSnapshot{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		s := proto.Size(x.ServiceHealth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_EndOfSnapshot:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ACLRule struct {
	Resource             ACLResource `protobuf:"varint,1,opt,name=Resource,proto3,enum=stream.ACLResource" json:"Resource,omitempty"`
	Segment              string      `protobuf:"bytes,2,opt,name=Segment,proto3" json:"Segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ACLRule) Reset()         { *m = ACLRule{} }
func (m *ACLRule) String() string { return proto.CompactTextString(m) }
func (*ACLRule) ProtoMessage()    {}
func (*ACLRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}
func (m *ACLRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLRule.Merge(m, src)
}
func (m *ACLRule) XXX_Size() int {
	return m.Size()
}
func (m *ACLRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLRule.DiscardUnknown(m)
}

var xxx_messageInfo_ACLRule proto.InternalMessageInfo

func (m *ACLRule) GetResource() ACLResource {
	if m != nil {
		return m.Resource
	}
	return ACLResource_ServiceACL
}

func (m *ACLRule) GetSegment() string {
	if m != nil {
		return m.Segment
	}
	return ""
}

type ServiceHealthUpdate struct {
	CheckServiceNode     *CheckServiceNode `protobuf:"bytes,1,opt,name=CheckServiceNode,proto3" json:"CheckServiceNode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceHealthUpdate) Reset()         { *m = ServiceHealthUpdate{} }
func (m *ServiceHealthUpdate) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthUpdate) ProtoMessage()    {}
func (*ServiceHealthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}
func (m *ServiceHealthUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceHealthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceHealthUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceHealthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthUpdate.Merge(m, src)
}
func (m *ServiceHealthUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceHealthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthUpdate proto.InternalMessageInfo

func (m *ServiceHealthUpdate) GetCheckServiceNode() *CheckServiceNode {
	if m != nil {
		return m.CheckServiceNode
	}
	return nil
}

type Filters struct {
	Connect              bool     `protobuf:"varint,1,opt,name=Connect,proto3" json:"Connect,omitempty"`
	Tags                 []string `protobuf:"bytes,2,rep,name=Tags,proto3" json:"Tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filters) Reset()         { *m = Filters{} }
func (m *Filters) String() string { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()    {}
func (*Filters) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{4}
}
func (m *Filters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filters.Merge(m, src)
}
func (m *Filters) XXX_Size() int {
	return m.Size()
}
func (m *Filters) XXX_DiscardUnknown() {
	xxx_messageInfo_Filters.DiscardUnknown(m)
}

var xxx_messageInfo_Filters proto.InternalMessageInfo

func (m *Filters) GetConnect() bool {
	if m != nil {
		return m.Connect
	}
	return false
}

func (m *Filters) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterEnum("stream.Topic", Topic_name, Topic_value)
	proto.RegisterEnum("stream.Operation", Operation_name, Operation_value)
	proto.RegisterEnum("stream.ACLResource", ACLResource_name, ACLResource_value)
	proto.RegisterType((*SubscribeRequest)(nil), "stream.SubscribeRequest")
	proto.RegisterType((*Event)(nil), "stream.Event")
	proto.RegisterType((*ACLRule)(nil), "stream.ACLRule")
	proto.RegisterType((*ServiceHealthUpdate)(nil), "stream.ServiceHealthUpdate")
	proto.RegisterType((*Filters)(nil), "stream.Filters")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xf6, 0xe6, 0x8f, 0x9d, 0x4c, 0x9a, 0xd4, 0xdd, 0xfe, 0xf4, 0x93, 0x15, 0xa4, 0xc8, 0xb8,
	0x12, 0xb2, 0x72, 0x08, 0x28, 0x39, 0xc0, 0x35, 0x71, 0x8b, 0x8a, 0x88, 0x08, 0xda, 0xa4, 0x27,
	0x4e, 0x8e, 0x3d, 0x34, 0x56, 0x5d, 0xdb, 0x78, 0xd7, 0x15, 0x7d, 0x13, 0x1e, 0x80, 0x27, 0xe1,
	0xc4, 0x91, 0x47, 0x40, 0xe1, 0x45, 0x90, 0xed, 0x75, 0x94, 0x04, 0x6e, 0xdc, 0xf6, 0xfb, 0xe6,
	0x9b, 0xdd, 0x6f, 0x66, 0x67, 0xe0, 0x94, 0x67, 0x6b, 0xee, 0xa5, 0xc1, 0x1a, 0x47, 0x49, 0x1a,
	0x8b, 0x98, 0xaa, 0x5c, 0xa4, 0xe8, 0xde, 0xf7, 0xbb, 0x5c, 0xa4, 0x99, 0x27, 0x78, 0x49, 0x5b,
	0xdf, 0x08, 0xe8, 0xcb, 0x4a, 0xca, 0xf0, 0x53, 0x86, 0x5c, 0xd0, 0x0b, 0x68, 0xae, 0xe2, 0x24,
	0xf0, 0x0c, 0x62, 0x12, 0xbb, 0x37, 0xee, 0x8e, 0xca, 0xdc, 0x51, 0x41, 0xb2, 0x32, 0x46, 0x75,
	0xa8, 0xbf, 0xc5, 0x47, 0xa3, 0x66, 0x12, 0xbb, 0xcd, 0xf2, 0x23, 0xfd, 0x2f, 0x4f, 0xbb, 0xc3,
	0xc8, 0xa8, 0x17, 0x5c, 0x09, 0x72, 0xf6, 0x4d, 0xe4, 0xe3, 0x67, 0xa3, 0x61, 0x12, 0xbb, 0xc1,
	0x4a, 0x40, 0xff, 0x07, 0xf5, 0x75, 0x10, 0x0a, 0x4c, 0x8d, 0x66, 0x21, 0x96, 0x88, 0x4e, 0xe0,
	0xa4, 0xb8, 0xbe, 0x84, 0xdc, 0x50, 0x4d, 0x62, 0x77, 0xc6, 0xa7, 0x95, 0x03, 0x49, 0xb3, 0x03,
	0x91, 0xf5, 0xb5, 0x06, 0xcd, 0xab, 0x07, 0x8c, 0xfe, 0xc5, 0x79, 0xe9, 0xb1, 0xbe, 0xef, 0x71,
	0x02, 0x27, 0x79, 0x47, 0x82, 0x14, 0xfd, 0xa9, 0x33, 0xe7, 0x46, 0xc3, 0xac, 0xef, 0x7b, 0x99,
	0x3a, 0x73, 0x96, 0x85, 0xc8, 0x0e, 0x44, 0xf4, 0x29, 0xd4, 0x16, 0x49, 0x51, 0x54, 0x6f, 0x7c,
	0x56, 0x49, 0x17, 0x09, 0xa6, 0xae, 0x08, 0xe2, 0x88, 0xd5, 0x16, 0x09, 0x75, 0xa0, 0xbb, 0xc4,
	0xf4, 0x21, 0xf0, 0xf0, 0x1a, 0xdd, 0x50, 0x6c, 0x64, 0x91, 0x4f, 0x2a, 0xf5, 0x41, 0xf0, 0x26,
	0xf1, 0x5d, 0x81, 0xd7, 0x0a, 0x3b, 0xcc, 0xa1, 0xcf, 0xa0, 0x7b, 0x15, 0xf9, 0x8b, 0x8f, 0xcb,
	0xc8, 0x4d, 0xf8, 0x26, 0x16, 0x86, 0x66, 0x12, 0xbb, 0x95, 0xeb, 0x0e, 0xe8, 0x59, 0x1b, 0xb4,
	0xf7, 0xee, 0x63, 0x18, 0xbb, 0xbe, 0xb5, 0x02, 0x4d, 0x7a, 0xa6, 0xcf, 0xa1, 0xc5, 0x90, 0xc7,
	0x59, 0xea, 0xa1, 0x6c, 0xd5, 0xf9, 0x7e, 0x59, 0x32, 0xc4, 0x76, 0x22, 0x6a, 0x80, 0xb6, 0xc4,
	0xdb, 0x7b, 0x8c, 0x84, 0xec, 0x5b, 0x05, 0xad, 0x0f, 0x70, 0xfe, 0x17, 0xc3, 0xf4, 0x12, 0x74,
	0x67, 0x83, 0xde, 0x9d, 0x8c, 0xbd, 0x8b, 0xfd, 0xf2, 0xa5, 0xce, 0xd8, 0xa8, 0x5e, 0x3a, 0x8e,
	0xb3, 0x3f, 0x32, 0xac, 0x97, 0xa0, 0xc9, 0x4f, 0xce, 0x1d, 0x38, 0x71, 0x14, 0xa1, 0x27, 0x8a,
	0x7b, 0x5a, 0xac, 0x82, 0x94, 0x42, 0x63, 0xe5, 0xde, 0x72, 0xa3, 0x66, 0xd6, 0xed, 0x36, 0x2b,
	0xce, 0xc3, 0xbe, 0x1c, 0x04, 0x7a, 0x76, 0xd4, 0x6c, 0x5d, 0x19, 0x5e, 0x40, 0x7b, 0xf7, 0x21,
	0x14, 0x40, 0xbd, 0x49, 0x38, 0xa6, 0x42, 0x57, 0xf2, 0xf3, 0x25, 0x86, 0x28, 0x50, 0x27, 0xc3,
	0x21, 0x74, 0xf6, 0x3a, 0x41, 0x7b, 0x00, 0xf2, 0x9a, 0xa9, 0x33, 0xd7, 0x15, 0xda, 0x01, 0x2d,
	0x37, 0x98, 0x03, 0x32, 0x9e, 0x81, 0xea, 0xc4, 0x11, 0xcf, 0x42, 0xfa, 0x0a, 0xda, 0xbb, 0x6d,
	0xa2, 0xbb, 0x42, 0x8f, 0x17, 0xac, 0xbf, 0x9b, 0xcb, 0x62, 0x6a, 0x2d, 0xe5, 0x05, 0x99, 0xe9,
	0xdf, 0xb7, 0x03, 0xf2, 0x63, 0x3b, 0x20, 0x3f, 0xb7, 0x03, 0xf2, 0xe5, 0xd7, 0x40, 0x59, 0xab,
	0xc5, 0x86, 0x4e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xac, 0x00, 0x10, 0xcb, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsulClient is the client API for Consul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsulClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error)
}

type consulClient struct {
	cc *grpc.ClientConn
}

func NewConsulClient(cc *grpc.ClientConn) ConsulClient {
	return &consulClient{cc}
}

func (c *consulClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consul_serviceDesc.Streams[0], "/stream.Consul/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &consulSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consul_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type consulSubscribeClient struct {
	grpc.ClientStream
}

func (x *consulSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsulServer is the server API for Consul service.
type ConsulServer interface {
	Subscribe(*SubscribeRequest, Consul_SubscribeServer) error
}

// UnimplementedConsulServer can be embedded to have forward compatible implementations.
type UnimplementedConsulServer struct {
}

func (*UnimplementedConsulServer) Subscribe(req *SubscribeRequest, srv Consul_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterConsulServer(s *grpc.Server, srv ConsulServer) {
	s.RegisterService(&_Consul_serviceDesc, srv)
}

func _Consul_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsulServer).Subscribe(m, &consulSubscribeServer{stream})
}

type Consul_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type consulSubscribeServer struct {
	grpc.ServerStream
}

func (x *consulSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Consul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Consul",
	HandlerType: (*ConsulServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Consul_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscribe.proto",
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if m.TopicFilters != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.TopicFilters.Size()))
		n1, err1 := m.TopicFilters.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if len(m.RequiredACLs) > 0 {
		for _, msg := range m.RequiredACLs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSubscribe(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Op != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if m.Payload != nil {
		nn2, err2 := m.Payload.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_ServiceHealth) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServiceHealth != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ServiceHealth.Size()))
		n3, err3 := m.ServiceHealth.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *Event_EndOfSnapshot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	if m.EndOfSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ACLRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resource != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Resource))
	}
	if len(m.Segment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Segment)))
		i += copy(dAtA[i:], m.Segment)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceHealthUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceHealthUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CheckServiceNode != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.CheckServiceNode.Size()))
		n4, err4 := m.CheckServiceNode.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Filters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Connect {
		dAtA[i] = 0x8
		i++
		if m.Connect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSubscribe(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.TopicFilters != nil {
		l = m.TopicFilters.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	if len(m.RequiredACLs) > 0 {
		for _, e := range m.RequiredACLs {
			l = e.Size()
			n += 1 + l + sovSubscribe(uint64(l))
		}
	}
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_ServiceHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceHealth != nil {
		l = m.ServiceHealth.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_EndOfSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ACLRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != 0 {
		n += 1 + sovSubscribe(uint64(m.Resource))
	}
	l = len(m.Segment)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceHealthUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckServiceNode != nil {
		l = m.CheckServiceNode.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Filters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Connect {
		n += 2
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSubscribe(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSubscribe(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSubscribe(x uint64) (n int) {
	return sovSubscribe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicFilters == nil {
				m.TopicFilters = &Filters{}
			}
			if err := m.TopicFilters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredACLs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredACLs = append(m.RequiredACLs, &ACLRule{})
			if err := m.RequiredACLs[len(m.RequiredACLs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHealthUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ServiceHealth{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_EndOfSnapshot{b}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			m.Resource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resource |= ACLResource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceHealthUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceHealthUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceHealthUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckServiceNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckServiceNode == nil {
				m.CheckServiceNode = &CheckServiceNode{}
			}
			if err := m.CheckServiceNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Connect = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscribe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSubscribe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSubscribe(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSubscribe
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSubscribe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscribe   = fmt.Errorf("proto: integer overflow")
)
